"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapImage = exports.onImageLoad = exports.loadBackgroundImage = exports.initImageStyles = exports.initImageClasses = exports.initImageBackgroundStyles = exports.initImageBackgroundClasses = exports.finishAnimation = exports.applyOrUpdateWrapper = exports.applyOrUpdateBlurHashCanvas = void 0;

var _ci = require("../common/ci.utils");

var _blurHash = require("./blurHash");

var loadBackgroundImage = function loadBackgroundImage(event) {
  var bgContainer = event.target;
  var bg = bgContainer.getAttribute('data-bg');
  var ciBlurHash = bgContainer.getAttribute('ci-blur-hash');

  if (bg) {
    var optimizedImage = new Image();

    optimizedImage.onload = function () {
      var bgCanvas = bgContainer.querySelector('canvas');
      finishAnimation(bgContainer, ciBlurHash && bgCanvas);
      bgContainer.removeAttribute('data-bg');
      bgContainer.removeAttribute('ci-preview');
    };

    optimizedImage.src = bg;
    bgContainer.style.backgroundImage = 'url(' + bg + ')';
  }
};

exports.loadBackgroundImage = loadBackgroundImage;

var applyOrUpdateWrapper = function applyOrUpdateWrapper(props) {
  var isUpdate = props.isUpdate,
      imgNode = props.imgNode,
      ratio = props.ratio,
      imgNodeWidth = props.imgNodeWidth,
      imgNodeHeight = props.imgNodeHeight,
      preserveSize = props.preserveSize;
  var wrapper;

  if (!isUpdate) {
    wrapper = wrapImage({
      imgNode: imgNode,
      ratio: ratio,
      imgNodeWidth: imgNodeWidth,
      imgNodeHeight: imgNodeHeight,
      preserveSize: preserveSize
    });
  } else {
    wrapper = (0, _ci.getWrapper)(imgNode); // TODO: remove in next release
    // if (ratio) {
    //   wrapper.style.paddingBottom = preserveSize ? 'none' : (100 / ratio) + '%';
    // }
  }

  return wrapper;
};

exports.applyOrUpdateWrapper = applyOrUpdateWrapper;

var wrapImage = function wrapImage(props) {
  var imgNode = props.imgNode,
      ratio = props.ratio,
      imgNodeWidth = props.imgNodeWidth,
      imgNodeHeight = props.imgNodeHeight,
      preserveSize = props.preserveSize;
  var wrapper = props.wrapper;
  wrapper = wrapper || document.createElement('div');
  (0, _ci.addClass)(wrapper, 'ci-image-wrapper');
  wrapper.style.display = 'block';
  wrapper.style.width = preserveSize ? imgNodeWidth : '100%';
  wrapper.style.height = preserveSize ? imgNodeHeight : 'auto';
  wrapper.style.overflow = 'hidden';
  wrapper.style.position = 'relative';

  if (ratio) {
    wrapper.style.paddingBottom = preserveSize ? 'none' : 100 / ratio + '%';
  }

  if (imgNode.nextSibling) {
    imgNode.parentNode.insertBefore(wrapper, imgNode.nextSibling);
  } else {
    imgNode.parentNode.appendChild(wrapper);
  }

  wrapper.appendChild(imgNode);
  return wrapper;
};

exports.wrapImage = wrapImage;

var finishAnimation = function finishAnimation(image, canvas) {
  if (canvas && canvas.style) {
    canvas.style.opacity = '0';
  }

  (0, _ci.addClass)(image, 'ci-image-loaded');
};

exports.finishAnimation = finishAnimation;

var initImageBackgroundClasses = function initImageBackgroundClasses(image, lazy) {
  (0, _ci.addClass)(image, 'ci-bg');

  if (lazy) {
    (0, _ci.addClass)(image, 'lazyload');
  }
};

exports.initImageBackgroundClasses = initImageBackgroundClasses;

var initImageBackgroundStyles = function initImageBackgroundStyles(image) {
  image.style.position = !image.style.position || image.style.position === 'static' ? 'relative' : image.style.position;
};

exports.initImageBackgroundStyles = initImageBackgroundStyles;

var initImageClasses = function initImageClasses(imgNode, lazy) {
  (0, _ci.addClass)(imgNode, 'ci-image');

  if (lazy) {
    (0, _ci.addClass)(imgNode, 'lazyload');
  }
};

exports.initImageClasses = initImageClasses;

var initImageStyles = function initImageStyles(imgNode) {
  imgNode.style.display = 'block';
  imgNode.style.width = '100%';
  imgNode.style.padding = '0';
  imgNode.style.position = 'absolute';
  imgNode.style.top = '0';
  imgNode.style.left = '0';
  imgNode.style.height = 'auto';
  imgNode.style.opacity = 1;
};

exports.initImageStyles = initImageStyles;

var applyOrUpdateBlurHashCanvas = function applyOrUpdateBlurHashCanvas(wrapper, blurHash) {
  var canvas = wrapper.querySelector('canvas');

  if (!canvas && blurHash) {
    canvas = document.createElement("canvas");
    var pixels = (0, _blurHash.decode)(blurHash, 32, 32);
    canvas.width = 32;
    canvas.height = 32;
    var ctx = canvas.getContext("2d");
    var imageData = ctx.getImageData(0, 0, 32, 32);
    imageData.data.set(pixels);
    ctx.putImageData(imageData, 0, 0);
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.position = 'absolute';
    canvas.style.top = '0';
    canvas.style.bottom = '0';
    canvas.style.left = '0';
    canvas.style.right = '0';
    canvas.style.opacity = '1';
    canvas.style.zIndex = '1';
    canvas.style.transition = 'opacity 400ms ease 0ms';
    wrapper.prepend(canvas);
  }

  return canvas;
};

exports.applyOrUpdateBlurHashCanvas = applyOrUpdateBlurHashCanvas;

var onImageLoad = function onImageLoad(_ref) {
  var wrapper = _ref.wrapper,
      imgNode = _ref.imgNode,
      canvas = _ref.canvas,
      preserveSize = _ref.preserveSize,
      ratio = _ref.ratio,
      isAdaptive = _ref.isAdaptive;
  wrapper.style.background = 'transparent';

  if (!ratio || isAdaptive) {
    wrapper.style.paddingBottom = preserveSize ? 'none' : 100 / (imgNode.width / imgNode.height || 1) + '%';
  }

  finishAnimation(imgNode, canvas);
};

exports.onImageLoad = onImageLoad;
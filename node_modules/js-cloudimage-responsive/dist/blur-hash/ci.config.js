"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInitialConfigBlurHash = void 0;

var _ci = require("../common/ci.utils");

var _constants = require("cloudimage-responsive-utils/dist/constants");

var getInitialConfigBlurHash = function getInitialConfigBlurHash(config) {
  var _config$imgSelector = config.imgSelector,
      imgSelector = _config$imgSelector === void 0 ? 'ci-src' : _config$imgSelector,
      _config$bgSelector = config.bgSelector,
      bgSelector = _config$bgSelector === void 0 ? 'ci-bg-url' : _config$bgSelector,
      _config$token = config.token,
      token = _config$token === void 0 ? '' : _config$token,
      _config$domain = config.domain,
      domain = _config$domain === void 0 ? 'cloudimg.io' : _config$domain,
      _config$lazyLoading = config.lazyLoading,
      lazyLoading = _config$lazyLoading === void 0 ? false : _config$lazyLoading,
      baseUrl = config.baseUrl,
      baseURL = config.baseURL,
      presets = config.presets,
      _config$ratio = config.ratio,
      ratio = _config$ratio === void 0 ? 1.5 : _config$ratio,
      _config$params = config.params,
      params = _config$params === void 0 ? 'org_if_sml=1' : _config$params,
      _config$apiVersion = config.apiVersion,
      apiVersion = _config$apiVersion === void 0 ? 'v7' : _config$apiVersion,
      _config$init = config.init,
      init = _config$init === void 0 ? true : _config$init,
      _config$exactSize = config.exactSize,
      exactSize = _config$exactSize === void 0 ? false : _config$exactSize,
      _config$doNotReplaceU = config.doNotReplaceURL,
      doNotReplaceURL = _config$doNotReplaceU === void 0 ? false : _config$doNotReplaceU,
      _config$limitFactor = config.limitFactor,
      limitFactor = _config$limitFactor === void 0 ? 100 : _config$limitFactor,
      _config$devicePixelRa = config.devicePixelRatioList,
      devicePixelRatioList = _config$devicePixelRa === void 0 ? _constants.DEVICE_PIXEL_RATIO_LIST : _config$devicePixelRa,
      ignoreNodeImgSize = config.ignoreNodeImgSize,
      _config$imageSizeAttr = config.imageSizeAttributes,
      imageSizeAttributes = _config$imageSizeAttr === void 0 ? 'use' : _config$imageSizeAttr,
      _config$ignoreStyleIm = config.ignoreStyleImgSize,
      ignoreStyleImgSize = _config$ignoreStyleIm === void 0 ? false : _config$ignoreStyleIm,
      _config$destroyNodeIm = config.destroyNodeImgSize,
      destroyNodeImgSize = _config$destroyNodeIm === void 0 ? false : _config$destroyNodeIm,
      _config$saveNodeImgRa = config.saveNodeImgRatio,
      saveNodeImgRatio = _config$saveNodeImgRa === void 0 ? false : _config$saveNodeImgRa,
      _config$detectImageNo = config.detectImageNodeCSS,
      detectImageNodeCSS = _config$detectImageNo === void 0 ? false : _config$detectImageNo,
      _config$processOnlyWi = config.processOnlyWidth,
      processOnlyWidth = _config$processOnlyWi === void 0 ? false : _config$processOnlyWi,
      onImageLoad = config.onImageLoad;
  return {
    imgSelector: imgSelector,
    bgSelector: bgSelector,
    token: token,
    domain: domain,
    lazyLoading: lazyLoading,
    baseURL: baseUrl || baseURL,
    ratio: ratio,
    exactSize: exactSize,
    presets: presets ? presets : {
      xs: '(max-width: 575px)',
      // to 575       PHONE
      sm: '(min-width: 576px)',
      // 576 - 767    PHABLET
      md: '(min-width: 768px)',
      // 768 - 991    TABLET
      lg: '(min-width: 992px)',
      // 992 - 1199   SMALL_LAPTOP_SCREEN
      xl: '(min-width: 1200px)' // from 1200    USUALSCREEN

    },
    params: (0, _ci.getParams)(params),
    apiVersion: apiVersion,
    innerWidth: typeof window !== 'undefined' ? window.innerWidth : null,
    init: init,
    previewQualityFactor: 10,
    doNotReplaceURL: doNotReplaceURL,
    devicePixelRatioList: devicePixelRatioList,
    limitFactor: limitFactor,
    ignoreNodeImgSize: ignoreNodeImgSize,
    ignoreStyleImgSize: ignoreStyleImgSize,
    destroyNodeImgSize: destroyNodeImgSize,
    saveNodeImgRatio: saveNodeImgRatio,
    detectImageNodeCSS: detectImageNodeCSS,
    processOnlyWidth: processOnlyWidth,
    imageSizeAttributes: imageSizeAttributes,
    onImageLoad: onImageLoad
  };
};

exports.getInitialConfigBlurHash = getInitialConfigBlurHash;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSrcset = exports.setSrc = exports.setBackgroundSrc = exports.isLazy = exports.getWrapper = exports.getParams = exports.getImageProps = exports.getFreshCIElements = exports.getBackgroundImageProps = exports.filterImages = exports.destroyNodeImgSize = exports.addClass = void 0;

var _getParamsFromUrl = require("cloudimage-responsive-utils/dist/utils/get-params-from-url");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var filterImages = function filterImages(images, type) {
  var filtered = [];

  for (var i = 0; i < images.length; i++) {
    var image = images[i];
    var isProcessed = image.className.indexOf(type) !== -1;

    if (!isProcessed) {
      filtered.push(image);
    }
  }

  return filtered;
};

exports.filterImages = filterImages;

var getCommonImageProps = function getCommonImageProps(image) {
  return {
    sizes: getSize(attr(image, 'ci-sizes') || attr(image, 'data-ci-size') || {}) || undefined,
    params: getParams(attr(image, 'ci-params') || attr(image, 'data-ci-params') || {}),
    imgNodeRatio: attr(image, 'ci-ratio') || attr(image, 'data-ci-ratio') || undefined,
    blurHash: attr(image, 'ci-blur-hash') || attr(image, 'data-ci-blur-hash') || undefined,
    isLazyCanceled: attr(image, 'ci-not-lazy') !== null || attr(image, 'data-ci-not-lazy') !== null || undefined,
    preserveSize: attr(image, 'ci-preserve-size') !== null || attr(image, 'data-preserve-size') !== null || undefined,
    imgNodeWidth: attr(image, 'width'),
    imgNodeHeight: attr(image, 'height')
  };
};

var getParams = function getParams(params) {
  var resultParams = undefined;

  try {
    var temp = params.replace(/(\w+:)|(\w+ :)/g, function (matchedStr) {
      return '"' + matchedStr.substring(0, matchedStr.length - 1) + '":';
    });
    resultParams = JSON.parse(temp);
  } catch (e) {}

  if (!resultParams) {
    try {
      resultParams = JSON.parse('{"' + decodeURI(params.replace(/&/g, "\",\"").replace(/=/g, "\":\"")) + '"}');
    } catch (e) {}
  }

  return resultParams;
};

exports.getParams = getParams;

var getSize = function getSize(sizes) {
  var resultSizes = null;

  try {
    // add quotes around params
    var temp = sizes.replace(/(\w+:)|(\w+ :)/g, function (matchedStr) {
      if (matchedStr === 'https:' || matchedStr === 'http:') {
        return matchedStr;
      } else {
        return '"' + matchedStr.substring(0, matchedStr.length - 1) + '":';
      }
    }); // change single quotes to double quotes

    temp = temp.replace(/'/g, '"').replace(/-"width":/g, '-width:');
    resultSizes = JSON.parse(temp);
  } catch (e) {}

  if (resultSizes) {
    Object.keys(resultSizes).forEach(function (key) {
      if (typeof resultSizes[key] === 'string') {
        try {
          resultSizes[key] = JSON.parse('{"' + decodeURI(resultSizes[key].replace(/&/g, "\",\"").replace(/=/g, "\":\"")) + '"}');
        } catch (e) {}
      }
    });
  }

  return resultSizes;
};

var getImageProps = function getImageProps(image, imgSelector) {
  var props = _objectSpread(_objectSpread({}, getCommonImageProps(image)), {}, {
    imgNodeSRC: attr(image, imgSelector) || undefined
  });

  var params = _objectSpread(_objectSpread({}, (0, _getParamsFromUrl.getParamsFromURL)(props.imgNodeSRC || '')), props.params);

  return _objectSpread(_objectSpread({}, props), {}, {
    params: params,
    isAdaptive: !!props.sizes,
    imgNodeSRC: getURLWithoutQueryParams(props.imgNodeSRC)
  });
};

exports.getImageProps = getImageProps;

var getBackgroundImageProps = function getBackgroundImageProps(image, bgSelector) {
  var props = _objectSpread(_objectSpread({}, getCommonImageProps(image)), {}, {
    imgNodeSRC: attr(image, bgSelector) || undefined,
    minWindowWidth: attr(image, 'ci-min-window-width') || attr(image, 'data-min-window-width') || undefined
  });

  var params = _objectSpread(_objectSpread({}, (0, _getParamsFromUrl.getParamsFromURL)(props.imgNodeSRC || '')), props.params);

  return _objectSpread(_objectSpread({}, props), {}, {
    params: params,
    isAdaptive: !!props.sizes,
    imgNodeSRC: getURLWithoutQueryParams(props.imgNodeSRC)
  });
};

exports.getBackgroundImageProps = getBackgroundImageProps;

var getURLWithoutQueryParams = function getURLWithoutQueryParams() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return url.split('?')[0];
};

var attr = function attr(element, attribute) {
  return element.getAttribute(attribute);
};

var addClass = function addClass(elem, className) {
  if (!(elem.className.indexOf(className) > -1)) {
    elem.className += ' ' + className;
  }
};

exports.addClass = addClass;

var getWrapper = function getWrapper(image) {
  if ((image.parentNode.className || '').indexOf('ci-image-wrapper') > -1) {
    return image.parentNode;
  } else if ((image.parentNode.parentNode.className || '').indexOf('ci-image-wrapper') > -1) {
    return image.parentNode.parentNode;
  }
};

exports.getWrapper = getWrapper;

var isLazy = function isLazy(lazyLoading, isLazyCanceled, isUpdate) {
  if (isLazyCanceled && lazyLoading || isUpdate) {
    lazyLoading = false;
  }

  return lazyLoading;
};

exports.isLazy = isLazy;

var setSrc = function setSrc(image, url, propertyName, lazy, imgSrc, isSVG, dataSrcAttr) {
  image.setAttribute(lazy ? propertyName ? propertyName : 'data-src' : dataSrcAttr ? dataSrcAttr : 'src', isSVG ? imgSrc : url);
};

exports.setSrc = setSrc;

var setSrcset = function setSrcset(image, urls, propertyName, lazy, imgSrc, isSVG, dataSrcAttr) {
  if (isSVG) return;
  image.setAttribute(lazy ? propertyName ? propertyName : 'data-srcset' : dataSrcAttr ? dataSrcAttr : 'srcset', urls.map(function (_ref) {
    var dpr = _ref.dpr,
        url = _ref.url;
    return "".concat(url, " ").concat(dpr, "x");
  }).join(', '));
};

exports.setSrcset = setSrcset;

var setBackgroundSrc = function setBackgroundSrc(image, url, lazy, imgSrc, isSVG, dataSrcAttr) {
  var resultLink = isSVG ? imgSrc : url;

  if (lazy) {
    image.setAttribute(dataSrcAttr ? dataSrcAttr : 'data-bg', resultLink);
  } else {
    image.style.backgroundImage = "url('".concat(resultLink, "')");
  }
};

exports.setBackgroundSrc = setBackgroundSrc;

var getFreshCIElements = function getFreshCIElements(isUpdate, rootElement, imgSelector, bgSelector) {
  var images, backgroundImages;

  if (rootElement !== document && !(rootElement instanceof HTMLElement)) {
    throw new TypeError('rootElement should be an HTMLElement');
  }

  if (isUpdate) {
    images = rootElement.querySelectorAll("img[".concat(imgSelector, "]"));
    backgroundImages = rootElement.querySelectorAll("[".concat(bgSelector, "]"));
  } else {
    images = filterImages(rootElement.querySelectorAll("img[".concat(imgSelector, "]")), 'ci-image');
    backgroundImages = filterImages(rootElement.querySelectorAll("[".concat(bgSelector, "]")), 'ci-bg');
  }

  return [images, backgroundImages];
};

exports.getFreshCIElements = getFreshCIElements;

var destroyNodeImgSize = function destroyNodeImgSize(imgNode) {
  imgNode.removeAttribute("height");
  imgNode.removeAttribute("width");
};

exports.destroyNodeImgSize = destroyNodeImgSize;
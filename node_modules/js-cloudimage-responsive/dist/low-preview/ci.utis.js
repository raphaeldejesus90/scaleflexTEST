"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapImage = exports.wrapBackgroundContainer = exports.updateSizeWithPixelRatio = exports.setAnimation = exports.onPreviewImageLoad = exports.onLazyBeforeUnveil = exports.onImageLoad = exports.loadBackgroundImage = exports.initImageClasses = exports.finishAnimation = exports.applyOrUpdateWrapper = exports.applyBackgroundStyles = void 0;

var _ci = require("../common/ci.utils");

var wrapBackgroundContainer = function wrapBackgroundContainer(imgNode) {
  var previewBox = document.createElement('div');
  var contentBox = document.createElement('div');

  if (imgNode.children && imgNode.children.length > 0) {
    wrapAll(contentBox, imgNode.children);
  }

  imgNode.prepend(previewBox);
  return [previewBox, contentBox];
};

exports.wrapBackgroundContainer = wrapBackgroundContainer;

var applyBackgroundStyles = function applyBackgroundStyles(_ref) {
  var imgNode = _ref.imgNode,
      previewBox = _ref.previewBox,
      contentBox = _ref.contentBox,
      lazy = _ref.lazy,
      width = _ref.width;
  imgNode.style.position = 'relative';
  contentBox.style.position = 'relative';
  previewBox.className = "".concat(imgNode.className).concat(lazy ? ' lazyload' : '');
  previewBox.setAttribute('ci-preview', true);
  previewBox.style.background = 'inherit';
  previewBox.style.position = 'absolute';
  previewBox.style.left = '0';
  previewBox.style.top = '0';
  previewBox.style.width = '100%';
  previewBox.style.height = '100%';
  imgNode.style.transform = 'translateZ(0)';
  imgNode.style.overflow = 'hidden';
  previewBox.style.transform = 'scale(1.1)';
  previewBox.style.filter = "blur(".concat(Math.floor(width / 100), "px)");
  previewBox.style.transition = 'opacity 400ms ease 0ms';
};

exports.applyBackgroundStyles = applyBackgroundStyles;

var setAnimation = function setAnimation(wrapper, image, parentContainerWidth, isBackground) {
  if (!isBackground) {
    if (wrapper) {
      wrapper.style.transition = 'opacity 400ms ease 0ms';
    }

    image.style.transform = 'scale(1.1)';
    image.style.filter = "blur(".concat(Math.floor(parentContainerWidth / 100), "px)");
  } else {
    image.style.overflow = 'hidden';
    (0, _ci.addClass)(image, 'ci-bg-animation');
  }
};

exports.setAnimation = setAnimation;

var finishAnimation = function finishAnimation(image, isBackground) {
  if (!isBackground) {
    var previewImg = image.parentNode.querySelector('img.ci-image-preview');
    var previewImgWrapper = previewImg && previewImg.parentNode;

    if (previewImgWrapper) {
      previewImgWrapper.style.opacity = 0;
    }
  } else {
    image.style.opacity = '0';
  }

  (0, _ci.addClass)(image, 'ci-image-loaded');
};

exports.finishAnimation = finishAnimation;

var onImageLoad = function onImageLoad(wrapper, previewImg, imgNode, ratio, preserveSize, isAdaptive) {
  var width = imgNode.width,
      height = imgNode.height;
  wrapper.style.background = 'transparent';

  if (!ratio || isAdaptive) {
    wrapper.style.paddingBottom = preserveSize ? 'none' : 100 / (width / height) + '%';
  }

  finishAnimation(imgNode);
};

exports.onImageLoad = onImageLoad;

var onPreviewImageLoad = function onPreviewImageLoad(wrapper, previewImg, ratio, preserveSize) {
  var naturalWidth = previewImg.naturalWidth,
      naturalHeight = previewImg.naturalHeight;
  wrapper.style.background = 'transparent';

  if (!ratio) {
    wrapper.style.paddingBottom = preserveSize ? 'none' : 100 / (naturalWidth / naturalHeight) + '%';
  }
};

exports.onPreviewImageLoad = onPreviewImageLoad;

var onLazyBeforeUnveil = function onLazyBeforeUnveil(event) {
  var bgContainer = event.target;
  var bg = bgContainer.getAttribute('data-bg');
  var isPreview = bgContainer.getAttribute('ci-preview') === 'true';
  var ciOptimizedUrl = (isPreview ? bgContainer.parentNode : bgContainer).getAttribute('ci-optimized-url');
  loadBackgroundImage(bg, isPreview, bgContainer, ciOptimizedUrl);
};

exports.onLazyBeforeUnveil = onLazyBeforeUnveil;

var loadBackgroundImage = function loadBackgroundImage(bg, isPreview, bgContainer, ciOptimizedUrl) {
  if (bg) {
    var optimizedImage = new Image();

    if (isPreview) {
      var previewImage = new Image();

      optimizedImage.onload = function () {
        finishAnimation(bgContainer, true);
        bgContainer.parentNode.removeAttribute('ci-optimized-url');
        bgContainer.removeAttribute('data-bg');
        bgContainer.removeAttribute('ci-preview');
      };

      bgContainer.parentNode.style.backgroundImage = 'url(' + ciOptimizedUrl + ')';
      optimizedImage.src = ciOptimizedUrl;
      previewImage.src = bg;
    } else {
      optimizedImage.onload = function () {
        bgContainer.removeAttribute('data-bg');
        bgContainer.removeAttribute('ci-preview');
      };

      optimizedImage.src = bg;
    }

    bgContainer.style.backgroundImage = 'url(' + bg + ')';
  }
};

exports.loadBackgroundImage = loadBackgroundImage;

var applyOrUpdateWrapper = function applyOrUpdateWrapper(props) {
  var isUpdate = props.isUpdate,
      imgNode = props.imgNode,
      isPreview = props.isPreview,
      lazy = props.lazy;
  var wrapper,
      previewImgNode = null,
      previewWrapper = null;

  if (!isUpdate) {
    wrapper = wrapImage(props);

    if (isPreview) {
      previewWrapper = document.createElement('div');
      previewImgNode = document.createElement('img');
      previewImgNode.className = "ci-image-ratio ci-image-preview".concat(lazy ? ' lazyload' : '');
      previewWrapper.style.transform = 'translateZ(0)';
      previewWrapper.style.zIndex = '1';
      previewWrapper.style.height = '100%';
      previewWrapper.style.width = '100%';
      previewWrapper.style.position = 'absolute';
      previewWrapper.style.top = '0';
      previewWrapper.style.left = '0';
      previewImgNode.alt = "Low quality preview for ".concat(imgNode.alt || (imgNode.src || '').split('.')[0]);
      previewWrapper.appendChild(previewImgNode);
      wrapper.insertBefore(previewWrapper, imgNode);
      (0, _ci.addClass)(wrapper, 'ci-with-preview-image');
    }
  } else {
    wrapper = (0, _ci.getWrapper)(imgNode); // TODO: remove in next release
    //if (ratio) {
    //  wrapper.style.paddingBottom = preserveSize ? 'none' : (100 / ratio) + '%';
    //}
  }

  return {
    wrapper: wrapper,
    previewImgNode: previewImgNode,
    previewWrapper: previewWrapper
  };
};

exports.applyOrUpdateWrapper = applyOrUpdateWrapper;

var wrapImage = function wrapImage(props) {
  var imgNode = props.imgNode,
      ratio = props.ratio,
      imgNodeWidth = props.imgNodeWidth,
      imgNodeHeight = props.imgNodeHeight,
      preserveSize = props.preserveSize,
      placeholderBackground = props.placeholderBackground;
  var wrapper = props.wrapper;
  wrapper = wrapper || document.createElement('div');
  (0, _ci.addClass)(wrapper, 'ci-image-wrapper');
  wrapper.style.background = placeholderBackground;
  wrapper.style.display = 'block';
  wrapper.style.width = preserveSize ? imgNodeWidth : '100%';
  wrapper.style.height = preserveSize ? imgNodeHeight : 'auto';
  wrapper.style.overflow = 'hidden';
  wrapper.style.position = 'relative';

  if (ratio) {
    wrapper.style.paddingBottom = preserveSize ? 'none' : 100 / ratio + '%';
  }

  if (imgNode.nextSibling) {
    imgNode.parentNode.insertBefore(wrapper, imgNode.nextSibling);
  } else {
    imgNode.parentNode.appendChild(wrapper);
  }

  wrapper.appendChild(imgNode);
  return wrapper;
};

exports.wrapImage = wrapImage;

var initImageClasses = function initImageClasses(_ref2) {
  var imgNode = _ref2.imgNode,
      lazy = _ref2.lazy;
  (0, _ci.addClass)(imgNode, 'ci-image');

  if (lazy) {
    (0, _ci.addClass)(imgNode, 'lazyload');
  }
};
/*
* possible size values: 200 | 200x400
* */


exports.initImageClasses = initImageClasses;

var updateSizeWithPixelRatio = function updateSizeWithPixelRatio(size, devicePixelRatio) {
  var splittedSizes = size.toString().split('x');
  var result = [];
  [].forEach.call(splittedSizes, function (size) {
    size ? result.push(Math.floor(size * ((devicePixelRatio || window.devicePixelRatio).toFixed(1) || 1))) : '';
  });
  return result.join('x');
};

exports.updateSizeWithPixelRatio = updateSizeWithPixelRatio;

var wrapAll = function wrapAll(wrapper, elms) {
  var el = elms.length ? elms[0] : elms;
  var parent = el.parentNode;
  var sibling = el.nextSibling;
  wrapper.appendChild(el);

  while (elms.length) {
    wrapper.appendChild(elms[0]);
  }

  if (sibling) {
    parent.insertBefore(wrapper, sibling);
  } else {
    parent.appendChild(wrapper);
  }
};
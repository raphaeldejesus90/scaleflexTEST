"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ci = require("../common/ci.utils");

var _determineContainerProps = require("cloudimage-responsive-utils/dist/utils/determine-container-props");

var _getImgSrc = require("cloudimage-responsive-utils/dist/utils/get-img-src");

var _generateUrl = require("cloudimage-responsive-utils/dist/utils/generate-url");

var _getBreakpoint = require("cloudimage-responsive-utils/dist/utils/get-breakpoint");

var _isSupportedInBrowser = require("cloudimage-responsive-utils/dist/utils/is-supported-in-browser");

var _ci2 = require("./ci.config");

var _ci3 = require("./ci.utils");

var _throttleDebounce = require("throttle-debounce");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CIResponsive = /*#__PURE__*/function () {
  function CIResponsive(_config) {
    var _this = this;

    _classCallCheck(this, CIResponsive);

    _defineProperty(this, "getBasicInfo", function (imgNode, isUpdate, windowScreenBecomesBigger, type) {
      var isImage = type === 'image';
      var config = _this.config;
      var baseURL = config.baseURL,
          lazyLoading = config.lazyLoading,
          presets = config.presets,
          devicePixelRatioList = config.devicePixelRatioList,
          imgSelector = config.imgSelector,
          bgSelector = config.bgSelector,
          processURL = config.processURL,
          processQueryString = config.processQueryString;
      var imgProps = isImage ? (0, _ci.getImageProps)(imgNode, imgSelector) : (0, _ci.getBackgroundImageProps)(imgNode, bgSelector);
      var params = imgProps.params,
          imgNodeSRC = imgProps.imgNodeSRC,
          isLazyCanceled = imgProps.isLazyCanceled,
          sizes = imgProps.sizes,
          isAdaptive = imgProps.isAdaptive,
          preserveSize = imgProps.preserveSize,
          minWindowWidth = imgProps.minWindowWidth;
      if (!imgNodeSRC) return;

      var _getImgSRC = (0, _getImgSrc.getImgSRC)(imgNodeSRC, baseURL),
          _getImgSRC2 = _slicedToArray(_getImgSRC, 2),
          src = _getImgSRC2[0],
          isSVG = _getImgSRC2[1];

      var lazy = (0, _ci.isLazy)(lazyLoading, isLazyCanceled, isUpdate);
      var size;

      if (!(0, _isSupportedInBrowser.isSupportedInBrowser)(true)) {
        if (isImage) {
          imgNode.src = src;
        } else {
          imgNode.style.backgroundImage = 'url(' + src + ')';
        }

        return;
      }

      if (window.innerWidth < minWindowWidth && !isImage) {
        imgNode.style.backgroundImage = 'none';
        return;
      }

      if (isAdaptive) {
        size = (0, _getBreakpoint.getBreakpoint)(sizes, presets);
      } else {
        if (isUpdate && !windowScreenBecomesBigger) return;
      }

      var containerProps = (0, _determineContainerProps.determineContainerProps)(_objectSpread(_objectSpread({}, imgProps), {}, {
        size: size,
        imgNode: imgNode,
        config: config
      }));
      var service = {
        props: {
          imgNode: imgNode,
          imgProps: imgProps,
          config: config
        },
        methods: {}
      };

      var generateURLbyDPR = function generateURLbyDPR(devicePixelRatio) {
        return (0, _generateUrl.generateURL)({
          src: src,
          params: params,
          config: config,
          containerProps: containerProps,
          devicePixelRatio: devicePixelRatio,
          processURL: processURL,
          processQueryString: processQueryString,
          service: service
        });
      };

      var cloudimageUrl = generateURLbyDPR();
      var cloudimageSrcset = devicePixelRatioList.map(function (dpr) {
        return {
          dpr: dpr.toString(),
          url: generateURLbyDPR(dpr)
        };
      });
      var props = {
        imgNode: imgNode,
        isUpdate: isUpdate,
        imgProps: imgProps,
        lazy: lazy,
        containerProps: containerProps,
        isSVG: isSVG,
        cloudimageUrl: cloudimageUrl,
        src: src,
        preserveSize: preserveSize
      };

      if (isImage) {
        _this.processImage(_objectSpread(_objectSpread({}, props), {}, {
          cloudimageUrl: generateURLbyDPR(1),
          cloudimageSrcset: cloudimageSrcset
        }));
      } else {
        _this.processBackgroundImage(props);
      }
    });

    this.config = (0, _ci2.getInitialConfigPlain)(_config);
    if (this.config.init) this.init();
    this.innerWidth = window.innerWidth;
  }

  _createClass(CIResponsive, [{
    key: "init",
    value: function init() {
      document.addEventListener('lazybeforeunveil', _ci3.loadBackgroundImage);
      window.addEventListener('resize', (0, _throttleDebounce.debounce)(100, this.onUpdateDimensions.bind(this)));
      this.process();
    }
  }, {
    key: "onUpdateDimensions",
    value: function onUpdateDimensions() {
      this.process(true);

      if (this.innerWidth < window.innerWidth) {
        this.innerWidth = window.innerWidth;
      }
    }
  }, {
    key: "process",
    value: function process(isUpdate) {
      var _this2 = this;

      var rootElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      var _this$config = this.config,
          imgSelector = _this$config.imgSelector,
          bgSelector = _this$config.bgSelector;
      var windowScreenBecomesBigger = this.innerWidth < window.innerWidth;

      var _getFreshCIElements = (0, _ci.getFreshCIElements)(isUpdate, rootElement, imgSelector, bgSelector),
          _getFreshCIElements2 = _slicedToArray(_getFreshCIElements, 2),
          images = _getFreshCIElements2[0],
          backgroundImages = _getFreshCIElements2[1];

      if (images.length > -1) {
        images.forEach(function (imgNode) {
          _this2.getBasicInfo(imgNode, isUpdate, windowScreenBecomesBigger, 'image');
        });
      }

      if (backgroundImages.length > -1) {
        backgroundImages.forEach(function (imgNode) {
          _this2.getBasicInfo(imgNode, isUpdate, windowScreenBecomesBigger, 'background');
        });
      }
    }
  }, {
    key: "processImage",
    value: function processImage(props) {
      var imgNode = props.imgNode,
          isUpdate = props.isUpdate,
          lazy = props.lazy,
          isSVG = props.isSVG,
          cloudimageUrl = props.cloudimageUrl,
          src = props.src,
          cloudimageSrcset = props.cloudimageSrcset;
      var config = this.config;
      var dataSrcAttr = config.dataSrcAttr,
          onImageLoad = config.onImageLoad;

      if (!isUpdate) {
        (0, _ci3.initImageClasses)({
          imgNode: imgNode,
          lazy: lazy
        });
      }

      if (config.destroyNodeImgSize) {
        (0, _ci.destroyNodeImgSize)(imgNode);
      }

      if (config.processOnlyWidth) {
        imgNode.removeAttribute("height");
      }

      imgNode.onload = function () {
        if (onImageLoad && typeof onImageLoad === 'function') {
          onImageLoad(imgNode);
        }

        (0, _ci.addClass)(imgNode, 'ci-image-loaded');
      };

      (0, _ci.setSrcset)(imgNode, cloudimageSrcset, 'data-srcset', lazy, src, isSVG, dataSrcAttr);
      (0, _ci.setSrc)(imgNode, cloudimageUrl, 'data-src', lazy, src, isSVG, dataSrcAttr);
    }
  }, {
    key: "processBackgroundImage",
    value: function processBackgroundImage(props) {
      var imgNode = props.imgNode,
          isUpdate = props.isUpdate,
          lazy = props.lazy,
          isSVG = props.isSVG,
          cloudimageUrl = props.cloudimageUrl,
          src = props.src;
      var config = this.config;
      var dataSrcAttr = config.dataSrcAttr;

      if (!isUpdate) {
        imgNode.className = "".concat(imgNode.className).concat(lazy ? ' lazyload' : '');
      }

      (0, _ci.setBackgroundSrc)(imgNode, cloudimageUrl, lazy, src, isSVG, dataSrcAttr);
    }
  }]);

  return CIResponsive;
}();

exports.default = CIResponsive;
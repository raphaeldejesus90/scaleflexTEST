"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPreviewSRC = void 0;

var _generateUrl = require("../utils/generate-url");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getPreviewSRC = function getPreviewSRC(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === void 0 ? {} : _ref$config,
      containerProps = _ref.containerProps,
      params = _ref.params,
      src = _ref.src,
      devicePixelRatio = _ref.devicePixelRatio;
  var width = containerProps.width,
      height = containerProps.height;
  var previewQualityFactor = config.previewQualityFactor;
  var lowQualitySize = getLowQualitySize({
    width: width,
    height: height
  }, previewQualityFactor);
  return (0, _generateUrl.generateURL)({
    src: src,
    config: config,
    params: _objectSpread(_objectSpread({}, params), lowQualitySize),
    devicePixelRatio: devicePixelRatio
  });
};

exports.getPreviewSRC = getPreviewSRC;

var getLowQualitySize = function getLowQualitySize() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var factor = arguments.length > 1 ? arguments[1] : undefined;
  var width = params.width,
      height = params.height;
  width = width ? Math.floor(width / factor) : null;
  height = height ? Math.floor(height / factor) : null;
  return {
    width: width,
    w: width,
    height: height,
    h: height
  };
};